#!/bin/sh

# Generate utf8 include with xxd
if command -v xxd >/dev/null; then
  xxd -i src/utf8.h  | sed 's/\([0-9a-f]\)$/\0, 0x00/' > src/strutf8.xxd
  xxd -i src/arena.h | sed 's/\([0-9a-f]\)$/\0, 0x00/' > src/strarena.xxd
else
  echo "xxd is not installed." 1>&2
  echo "This is fine, until you want to change src/utf8.h or src/arena.h." 1>&2
  echo "Continuing." 1>&2
fi


if [ "$1" = "install" ]; then
  # Build release
  cc src/pgen.c -o pgen -O3 -march=native

  # Install binary
  sudo cp pgen /bin/pgen
  echo "Installed pgen."
elif [ "$1" = "profile" ]; then
  # Build pgen and generate tokenizer and parser.
  cc src/pgen.c -o pgen
  ./pgen -u examples/pl0.tok examples/pl0.peg -o examples/pl0.h

  cd examples/

  # Build pl0 tokenizer/parser for profiling
  cc pl0.c -static -O3 -march=native -ggdb3

  # Profile with Callgrind
  valgrind --tool=callgrind --collect-jumps=yes --dump-instr=yes ./a.out 2>/dev/null
  callgrind_annotate callgrind.out* > calls
  nano calls

  # Profile with Cachegrind
  valgrind --tool=cachegrind --branch-sim=yes ./a.out 2>/dev/null
  cg_annotate cachegrind.out.* > cache
  nano cache

  # Dump the instructions
  objdump -D a.out > dump
  nano dump

  # Make a flamegraph
  #flamegraph ./a.out

  # Clean up
  rm dump calls cache cachegrind.out.* callgrind.out.* 2>/dev/null
  cd ..

elif [ "$1" = "pgo" ]; then
  # Build instrumented binary
  clang src/pgen.c -o pgen -O3 -march=native -fprofile-instr-generate

  # Run the instrumented binary on the examples, creating perf data.
  ./pgen examples/calc.peg
  mv *.profraw 1.p
  ./pgen examples/bf.peg
  mv *.profraw 2.p
  ./pgen examples/pl0.peg
  mv *.profraw 3.p

  # Combine and index the perf data.
  llvm-profdata merge *.p -o pgen.pgo

  # Recompile using the perf data
  clang src/pgen.c -o pgen -O3 -march=native -fprofile-use=pgen.pgo

  #rm *.p pgen.pgo

elif [ "$1" = "macrocheck" ]; then

  # Build pgen and examples
  cc src/pgen.c -o pgen
  ./pgen examples/pl0.peg -o examples/pl0.h

  # Check
  echo '#include <limits.h>'   >  .empty.c
  echo '#include <stddef.h>'   >> .empty.c
  echo '#include <stdint.h>'   >> .empty.c
  echo '#include <stdio.h>'    >> .empty.c
  echo '#include <stdlib.h>'   >> .empty.c
  echo '#include <string.h>'   >> .empty.c
  echo '#include <inttypes.h>' >> .empty.c

  cc -dM -E .empty.c       | sort > .predef.c
  cc -dM -E examples/pl0.h | sort > .nowdef.c

  MACRS="$(diff .predef.c .nowdef.c | grep '>' | sed 's/^<\ //g' | cut -d' ' -f2- \
                                    | grep -v '#define PGEN_' \
                                    | grep -v '#define PL0_' \
                                    | grep -v '#define UTF8_' \
                                    | grep -v '#define recover' \
                                    | grep -v '#define PRI_CODEPOINT')"

  rm .empty.c .predef.c .nowdef.c
  if [ ! "$MACRS" = "" ]; then
    echo "Forgot to undef the following macros:"
    printf "%s\n" "$MACRS"
    exit 1;
  fi
else
  # Build debug
  cc src/pgen.c -o pgen --std=c99 -g -Wall -Wextra -Wpedantic -Wno-unused-parameter -Wno-unused-variable -Wconversion -fsanitize=address
  if [ ! "$?" -eq 0 ]; then exit 1; fi

  # Test
  if [ "$1" = "test" ]; then
    shift;

    # Generate pl0 example
    ./pgen examples/pl0.peg -o examples/pl0.h $@
    if [ ! "$?" -eq 0 ]; then exit 1; fi

    # Build and run pl0 example
    cd examples/
    cc pl0.c -g -fsanitize=address -Wconversion
    if [ ! "$?" -eq 0 ]; then exit 1; fi

    ./a.out > ../.testast.json
    if [ ! "$?" -eq 0 ]; then exit 1; fi

    cd ..

    DIFF="$(diff .refast.json .testast.json)"
    if [ ! "$DIFF" = "" ]; then
      echo "The test AST was different than expected.\nDiff:"
      echo "$DIFF"
    fi

    echo "Built and tested pgen."
  else
    echo "Built pgen."
  fi
fi
