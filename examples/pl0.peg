%oom (fprintf(stderr, "OUT OF MEMORY!\n"), exit(1))
%define recover(kind) (ERROR("Missing token: " #kind), ret = leaf(kind))

// Implements the example parser from
// https://en.wikipedia.org/wiki/Recursive_descent_parser#Example_parser

// Newlines ending in are merged.

// Syntax
EQ: "=";
CEQ: ":=";
SEMI: ";";
DOT: ".";
COMMA: ",";
OPEN: "(";
CLOSE: ")";
HASH: "#";

// Operators
LT: "<";
LEQ: "<=";
GT: ">";
GEQ: ">=";
PLUS: "+";
MINUS: "-";
STAR: "*";
DIV: "/";

// Keywords
VAR: "var";
PROC: "procedure";
WRITE: "write";
CONST: "const";
BEGIN: "begin";
END: "end";
IF: "if";
THEN: "then";
WHILE: "while";
DO: "do";
ODD: "odd";
CALL: "call";

// [_a-zA-Z][_a-zA-Z0-9]+
IDENT: (1, 2) {
  (0, [_a-zA-Z]) -> 1;
  ((1, 2), [_a-zA-Z0-9]) -> 2;
};

// [-+]?[0-9]+
NUM: 2 {
  (0, [-+]) -> 1;
  ((0, 1, 2), [0-9]) -> 2;
};

// [\ \n\r\t]+
WS: 1 {
  ((0, 1), [ \n\r\t]) -> 1;
};

// /\*([^*]*\*+[^/])*[^*]*\*+/
MLCOM: 4 {
  (0, '/') -> 1;
  (1, '*') -> 2;
  (2, '*') -> 3;
  (2, [^]) -> 2;
  (3, '*') -> 3;
  (3, '/') -> 4;
  (3, [^]) -> 2;
};

// \/\/[^\n]*
SLCOM: (2, 3) {
  (0, '/') -> 1;
  (1, '/') -> 2;
  (2, [^\n]) -> 2;
  (2, [\n]) -> 3;
};

/*
// #[^\n]*\n
HSLCOM: (1, 2) {
  (0, '#') -> 1;
  (1, [^\n]) -> 1;
  (1, [\n]) -> 2;
};
*/

%node PROGRAM
program    <- {rule=list(PROGRAM)}
              (b:block {add(rule, b)})*
              !IDENT|"Unexpected identifier"
              DOT|"Expected a dot at the end of the program"

%node VARLIST
%node CONSTLIST
vdef       <- VAR {rule=list(VARLIST)}
              i:IDENT|"Expected an identifier" {add(rule, node(IDENT, i))}
              (COMMA i:IDENT|"Expected an identifier" {add(rule, i)})*
              SEMI|{recover(SEMI)}
              /
              CONST {rule=list(CONSTLIST)}
              i:IDENT|"Expected an identifier"
              EQ|"Expected an equal sign"
              n:NUM|"Expected a number" {add(rule, node(CONST, i, n))}
              (COMMA
               i:IDENT|"Expected an identifier"
               e:EQ|"Expected an equal sign"
               n:NUM|"Expected a number" {add(rule, node(CONST, i, n))})*
              SEMI|{recover(SEMI)}

%node PROCLIST
block      <- v:vdef {rule=v}
              /
              {rule=list(PROCLIST)}
              (PROC
               i:IDENT|"Expected an identifier"
               SEMI|{recover(SEMI)} v:vdef?
               {add(rule, has(v) ? node(PROC, i, v) : node(PROC, i))})*
              s:statement {add(rule, s)}
              SEMI|{recover(SEMI)}

%node STATEMENT
statement  <- id:IDENT CEQ e:expression
              {rule=node(CEQ, id, e)}
              /
              CALL id:IDENT|"Expected an identifier"
              {rule=node(CALL, id)}
              /
              WRITE id:IDENT|"Expected an identifier"
              {rule=node(WRITE, id)}
              /
              BEGIN
              {rule=list(BEGIN)}
              smt:statement|"Expected a statement"
              {add(rule, node(STATEMENT, smt))}
              (SEMI smt:statement
               {add(rule, node(STATEMENT, smt))})*
              END|"Expected end"
              /
              IF
              c:condition|"Expected a condition"
              THEN|"Expected then"
              smt:statement|"Expected a statement"
              {rule=node(IF, c, smt)}
              /
              WHILE
              c:condition|"Expected a condition"
              DO|"Expected do"
              smt:statement|"Expected a statement"
              {rule=node(WHILE, c, smt)}

%node EXPRS
%node UNEXPR
%node BINEXPR
condition  <- ODD ex:expression
              {rule = node(UNEXPR, ex);}
              /
              ex:expression
              op:(EQ / HASH / LT / LEQ / GT / GEQ)
              ex_:expression|"Expected an expression"
              {rule=node(BINEXPR, op, ex, ex_)}

expression <- {rule=list(EXPRS)}
              pm:(PLUS / MINUS)? t:term
              {add(rule, has(pm) ? node(UNEXPR, pm, t) : t)}
              (pm:(PLUS / MINUS) t:term|"Expected a term"
              {add(rule, has(pm) ? node(BINEXPR, pm, t) : t)})*

%node TERM
term       <- {rule=list(EXPRS)}
              f:factor {add(rule, f)}
              (sd:(STAR / DIV) f:factor|"Expected a factor"
              {add(rule, node(TERM, sd, f))})*

factor     <- i:IDENT /
              n:NUM /
              OPEN e:expression CLOSE|"Expected closing parentheses" {rule=e}
